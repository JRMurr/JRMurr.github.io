{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var c=Object.create;var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var s=n=>r(n,\"__esModule\",{value:!0});var m=(n,a)=>()=>(a||n((a={exports:{}}).exports,a),a.exports),g=(n,a)=>{s(n);for(var l in a)r(n,l,{get:a[l],enumerable:!0})},y=(n,a,l)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let i of d(a))!p.call(n,i)&&i!==\"default\"&&r(n,i,{get:()=>a[i],enumerable:!(l=h(a,i))||l.enumerable});return n},b=n=>y(s(r(n!=null?c(u(n)):{},\"default\",n&&n.__esModule&&\"default\"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var o=m((x,t)=>{t.exports=_jsx_runtime});var w={};g(w,{default:()=>v,frontmatter:()=>k});var e=b(o()),k={title:\"Making a PR to Nixpkgs\",date:new Date(1659411785229),tags:[\"nix\",\"rust\"],draft:!1,summary:\"My rough ramblings on how to contribute a small pr to Nixpkgs\",images:[],layout:\"PostLayout\"};function f(n={}){let{wrapper:a}=n.components||{};return a?(0,e.jsx)(a,Object.assign({},n,{children:(0,e.jsx)(l,{})})):l();function l(){let i=Object.assign({h1:\"h1\",a:\"a\",span:\"span\",p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",pre:\"pre\",div:\"div\",code:\"code\",h3:\"h3\"},n.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(i.h1,{id:\"why\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#why\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"Why\"]}),`\n`,(0,e.jsxs)(i.p,{children:[\"Rust-analyzer was \",(0,e.jsx)(i.a,{href:\"https://rust-analyzer.github.io/thisweek/2022/08/01/changelog-140.html#an-update-on-proc-macros\",children:\"updated recently\"}),` to better support proc macros when working on nightly rust versions.\nI wanted to use this change right away but since I use `,(0,e.jsx)(i.a,{href:\"https://nixos.org/\",children:\"NixOS\"}),\" I needed the \",(0,e.jsx)(i.a,{href:\"https://github.com/NixOS/Nixpkgs\",children:\"nix pkg repo\"}),\" to update its version of rust-analyzer, so I can use it properly.\"]}),`\n`,(0,e.jsxs)(i.p,{children:[\"Edit: You don't need to make a pr to Nixpkgs just to update a version, they are other ways such as using overlays. Majiir on reddit goes over some options \",(0,e.jsx)(i.a,{href:\"https://www.reddit.com/r/NixOS/comments/wec9ob/making_a_pr_to_nixpkgs/iip657n/\",children:\"here\"})]}),`\n`,(0,e.jsx)(i.p,{children:`Since the version in Nixpkgs was out of date I decided it was time I finally learn how to make a PR back to Nixpkgs. So what follows are my rough ramblings of the process.\nSome of this is rust-analyzer/rust specific, some will be nix-build issues in general, and some will be Nixpkgs PRs in general.`}),`\n`,(0,e.jsxs)(i.h1,{id:\"the-steps\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#the-steps\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"The steps\"]}),`\n`,(0,e.jsxs)(i.p,{children:[\"For reference \",(0,e.jsx)(i.a,{href:\"https://github.com/NixOS/Nixpkgs/pull/184693\",children:\"this is the PR\"}),\" I made.\"]}),`\n`,(0,e.jsxs)(i.h2,{id:\"making-the-branch\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#making-the-branch\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"Making the branch\"]}),`\n`,(0,e.jsx)(i.p,{children:\"The normal steps when working on an open source project still apply\"}),`\n`,(0,e.jsxs)(i.ul,{children:[`\n`,(0,e.jsx)(i.li,{children:\"Fork the GitHub repo into your account\"}),`\n`,(0,e.jsx)(i.li,{children:\"Clone the fork locally\"}),`\n`]}),`\n`,(0,e.jsx)(i.p,{children:'For nix one of the first \"weird\" steps is to try to check out the commit that you are using locally with the following'}),`\n`,(0,e.jsxs)(i.pre,{className:\"shiki dracula\",style:{backgroundColor:\"#282A36\",color:\"#F8F8F2\"},children:[(0,e.jsx)(i.div,{className:\"language-id\",children:\"sh\"}),(0,e.jsx)(i.div,{className:\"code-container\",children:(0,e.jsxs)(i.code,{children:[(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ nixos-version --hash\"})}),(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"2b0dd45aca6a260762395ca2e94beab247f455a7\"})}),(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ git checkout 2b0dd45aca6a260762395ca2e94beab247f455a7\"})}),(0,e.jsxs)(i.div,{className:\"line\",children:[(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ git checkout -b \"}),(0,e.jsx)(i.span,{style:{color:\"#E9F284\"},children:\"'\"}),(0,e.jsx)(i.span,{style:{color:\"#F1FA8C\"},children:\"bump/rust-analyzer\"}),(0,e.jsx)(i.span,{style:{color:\"#E9F284\"},children:\"'\"})]})]})})]}),`\n`,(0,e.jsx)(i.p,{children:\"This way your local nix build cache is as up-to-date as possible.\"}),`\n`,(0,e.jsxs)(i.h2,{id:\"changing-the-nix-file\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#changing-the-nix-file\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"Changing the nix file\"]}),`\n`,(0,e.jsx)(i.p,{children:\"This part will vary depending on the package but if your change is a version update like the one I made the steps are roughly the following.\"}),`\n`,(0,e.jsxs)(i.ul,{children:[`\n`,(0,e.jsxs)(i.li,{children:[\"Update any \",(0,e.jsx)(i.code,{children:\"version\"}),\"/\",(0,e.jsx)(i.code,{children:\"rev\"}),\" variable to be the desired value\"]}),`\n`,(0,e.jsxs)(i.li,{children:[\"change any \",(0,e.jsx)(i.code,{children:\"sha\"}),\" variables to \",(0,e.jsx)(i.code,{children:\"pkgs.lib.fakeSha256;\"}),\" or just \",(0,e.jsx)(i.code,{children:\"00000000000000000000000\"}),`.\n`,(0,e.jsxs)(i.ul,{children:[`\n`,(0,e.jsx)(i.li,{children:\"This will cause the build to fail but will print the right SHA value.\"}),`\n`,(0,e.jsx)(i.li,{children:'There are \"better\" ways to get the right SHA, but this is pretty brain-dead, so I usually go this route'}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(i.p,{children:\"Once those steps are done, you can try building the package. For rust-analyzer, this is done by running the following in the root of the nixpkg repo\"}),`\n`,(0,e.jsxs)(i.pre,{className:\"shiki dracula\",style:{backgroundColor:\"#282A36\",color:\"#F8F8F2\"},children:[(0,e.jsx)(i.div,{className:\"language-id\",children:\"sh\"}),(0,e.jsx)(i.div,{className:\"code-container\",children:(0,e.jsx)(i.code,{children:(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ nix-build -A rust-analyzer\"})})})})]}),`\n`,(0,e.jsxs)(i.p,{children:[\"This will build \",(0,e.jsx)(i.code,{children:\"rust-analyzer\"}),\" and sym-link the output to \",(0,e.jsx)(i.code,{children:\"./result\"}),\", so for my case I can run\"]}),`\n`,(0,e.jsxs)(i.pre,{className:\"shiki dracula\",style:{backgroundColor:\"#282A36\",color:\"#F8F8F2\"},children:[(0,e.jsx)(i.div,{className:\"language-id\",children:\"sh\"}),(0,e.jsx)(i.div,{className:\"code-container\",children:(0,e.jsxs)(i.code,{children:[(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ ./result/bin/rust-analyzer --version\"})}),(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"rust-analyzer 2022-08-01\"})})]})})]}),`\n`,(0,e.jsxs)(i.h2,{id:\"testing-the-build\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#testing-the-build\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"Testing the build\"]}),`\n`,(0,e.jsxs)(i.p,{children:[\"While just running \",(0,e.jsx)(i.code,{children:\"nix-build\"}),\" might be fine, some pkgs have automated tests. While they will be run in CI its good practice to run them locally.\"]}),`\n`,(0,e.jsxs)(i.p,{children:[\"For \",(0,e.jsx)(i.code,{children:\"rust-analyzer\"}),\" there is this \",(0,e.jsx)(i.a,{href:\"https://github.com/NixOS/Nixpkgs/blob/master/pkgs/development/tools/rust/rust-analyzer/test-neovim-lsp.nix\",children:\"test-file\"}),\" that uses neovim to verify the LSP is running as expected.\"]}),`\n`,(0,e.jsx)(i.p,{children:\"To run this test I can run\"}),`\n`,(0,e.jsxs)(i.pre,{className:\"shiki dracula\",style:{backgroundColor:\"#282A36\",color:\"#F8F8F2\"},children:[(0,e.jsx)(i.div,{className:\"language-id\",children:\"sh\"}),(0,e.jsx)(i.div,{className:\"code-container\",children:(0,e.jsx)(i.code,{children:(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ nix-build -A rust-analyzer-unwrapped.tests.neovim-lsp\"})})})})]}),`\n`,(0,e.jsxs)(i.p,{children:[\"For this case if the \",(0,e.jsx)(i.code,{children:\"./result\"}),\" file is empty it worked as expected.\"]}),`\n`,(0,e.jsxs)(i.h2,{id:\"nixpkgs-review\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#nixpkgs-review\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"Nixpkgs-review\"]}),`\n`,(0,e.jsxs)(i.p,{children:[(0,e.jsx)(i.a,{href:\"https://github.com/Mic92/Nixpkgs-review\",children:\"nixpkgs-review\"}),\" is a really handy tool to build a nixpkg pr and make sure all deps of a change still build properly.\"]}),`\n`,(0,e.jsx)(i.p,{children:\"To run it while developing you can run\"}),`\n`,(0,e.jsxs)(i.pre,{className:\"shiki dracula\",style:{backgroundColor:\"#282A36\",color:\"#F8F8F2\"},children:[(0,e.jsx)(i.div,{className:\"language-id\",children:\"sh\"}),(0,e.jsx)(i.div,{className:\"code-container\",children:(0,e.jsx)(i.code,{children:(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ nixpkgs-review wip\"})})})})]}),`\n`,(0,e.jsxs)(i.p,{children:[\"this will build all changes then give you a \",(0,e.jsx)(i.code,{children:\"nix-shell\"}),\" to test out all the builds\"]}),`\n`,(0,e.jsx)(i.p,{children:\"If your changes are commited you can also run\"}),`\n`,(0,e.jsxs)(i.pre,{className:\"shiki dracula\",style:{backgroundColor:\"#282A36\",color:\"#F8F8F2\"},children:[(0,e.jsx)(i.div,{className:\"language-id\",children:\"sh\"}),(0,e.jsx)(i.div,{className:\"code-container\",children:(0,e.jsx)(i.code,{children:(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ nixpkgs-review rev HEAD\"})})})})]}),`\n`,(0,e.jsx)(i.p,{children:\"For the same effect.\"}),`\n`,(0,e.jsxs)(i.h2,{id:\"make-the-pr\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#make-the-pr\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"Make the PR!\"]}),`\n`,(0,e.jsxs)(i.p,{children:[\"Do a double check over the \",(0,e.jsx)(i.a,{href:\"https://github.com/NixOS/Nixpkgs/blob/master/CONTRIBUTING.md\",children:\"contributing README\"}),\" and the \",(0,e.jsx)(i.a,{href:\"https://nixos.org/manual/Nixpkgs/stable/#chap-submitting-changes\",children:\"submitting changes wiki\"}),\" pages to make sure you followed any extra steps.\"]}),`\n`,(0,e.jsx)(i.p,{children:\"Now you're good to submit the PR! Read over the PR template and once your PR has been submitted a bot will run tests and assign the appropriate reviews.\"}),`\n`,(0,e.jsxs)(i.h3,{id:\"handling-feedback\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#handling-feedback\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"Handling feedback\"]}),`\n`,(0,e.jsxs)(i.p,{children:[\"One slightly weird rule is if you have to update the PR after pushing \",(0,e.jsx)(i.a,{href:\"https://nixos.org/manual/Nixpkgs/stable/#submitting-changes-hotfixing-pull-requests\",children:\"you should not add more commits\"}),\".\"]}),`\n`,(0,e.jsx)(i.p,{children:\"To handle this you can make a new commit with the changes then run\"}),`\n`,(0,e.jsxs)(i.pre,{className:\"shiki dracula\",style:{backgroundColor:\"#282A36\",color:\"#F8F8F2\"},children:[(0,e.jsx)(i.div,{className:\"language-id\",children:\"sh\"}),(0,e.jsx)(i.div,{className:\"code-container\",children:(0,e.jsxs)(i.code,{children:[(0,e.jsxs)(i.div,{className:\"line\",children:[(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ git rebase -i HEAD~2 \"}),(0,e.jsx)(i.span,{style:{color:\"#6272A4\"},children:\"# the number 2 here assumes you only had one commit. If you have more do 1+(num commits)\"})]}),(0,e.jsx)(i.div,{className:\"line\"}),(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#6272A4\"},children:\"# in the interactive rebase window change all but the top `pick` to `s` for squash\"})}),(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#6272A4\"},children:\"# this will squash all commits into one\"})}),(0,e.jsx)(i.div,{className:\"line\"}),(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#6272A4\"},children:\"# git commit \\u2014amend would also work\"})}),(0,e.jsx)(i.div,{className:\"line\"}),(0,e.jsx)(i.div,{className:\"line\",children:(0,e.jsx)(i.span,{style:{color:\"#F8F8F2\"},children:\"$ git push --force\"})})]})})]}),`\n`,(0,e.jsxs)(i.h1,{id:\"profit\",children:[(0,e.jsx)(i.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#profit\",children:(0,e.jsx)(i.span,{className:\"icon icon-link\"})}),\"Profit\"]}),`\n`,(0,e.jsx)(i.p,{children:\"You have now joined the ranks of thankless open source developers! Feel free to enjoy the dopamine of the PR being merged.\"}),`\n`,(0,e.jsxs)(i.p,{children:[\"If you want some more nix posts I recently wrote a \",(0,e.jsx)(i.a,{href:\"https://medium.com/immuta-engineering/nix-and-skaffold-for-painless-developer-environments-bec6529ac82f\",children:\"blog for my job\"}),\" on how to setup simple nix flakes.\"]}),`\n`,(0,e.jsxs)(i.p,{children:[\"IF you would like a more in depth video walking through this process \",(0,e.jsx)(i.a,{href:\"https://www.youtube.com/watch?v=fvj8H5yUKu8\",children:\"this video\"}),\" by Jon Ringer is quite good!\"]})]})}}var v=f;return w;})();\n;return Component;","toc":[{"value":"Why","url":"#why","depth":1},{"value":"The steps","url":"#the-steps","depth":1},{"value":"Making the branch","url":"#making-the-branch","depth":2},{"value":"Changing the nix file","url":"#changing-the-nix-file","depth":2},{"value":"Testing the build","url":"#testing-the-build","depth":2},{"value":"Nixpkgs-review","url":"#nixpkgs-review","depth":2},{"value":"Make the PR!","url":"#make-the-pr","depth":2},{"value":"Handling feedback","url":"#handling-feedback","depth":3},{"value":"Profit","url":"#profit","depth":1}],"frontMatter":{"readingTime":{"text":"4 min read","minutes":3.83,"time":229800,"words":766},"slug":"updating-a-package-in-nixpkgs","fileName":"updating-a-package-in-nixpkgs.md","title":"Making a PR to Nixpkgs","date":"2022-08-02T03:43:05.229Z","tags":["nix","rust"],"draft":false,"summary":"My rough ramblings on how to contribute a small pr to Nixpkgs","images":[],"layout":"PostLayout"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.215,"time":12900,"words":43},"slug":["default"],"fileName":"default.md","name":"John Murray","avatar":"/static/images/me.jpg","occupation":"Software Engineer","github":"https://github.com/JRMurr","twitter":"https://twitter.com/JRMurrCodes","mastodon":"https://hachyderm.io/@jrmurr","email":"johnreillymurray@gmail.com","date":null}]},"__N_SSG":true}