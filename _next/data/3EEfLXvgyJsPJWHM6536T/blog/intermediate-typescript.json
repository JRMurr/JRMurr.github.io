{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var r=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var l=a=>c(a,\"__esModule\",{value:!0});var u=(a,s)=>()=>(s||a((s={exports:{}}).exports,s),s.exports),N=(a,s)=>{l(a);for(var t in s)c(a,t,{get:s[t],enumerable:!0})},k=(a,s,t)=>{if(s&&typeof s==\"object\"||typeof s==\"function\")for(let e of d(s))!m.call(a,e)&&e!==\"default\"&&c(a,e,{get:()=>s[e],enumerable:!(t=p(s,e))||t.enumerable});return a},y=a=>k(l(c(a!=null?r(h(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var o=u((T,i)=>{i.exports=_jsx_runtime});var b={};N(b,{default:()=>f,frontmatter:()=>g});var n=y(o()),g={title:\"Intermediate Typescript Part 1\",date:\"2022-01-25\",tags:[\"Typescript\",\"code\",\"types\"],draft:!1,summary:\"Typescript patterns I have found to make your life easier in a big codebase\",images:[],layout:\"PostLayout\"};function w(a={}){let{wrapper:s}=a.components||{};return s?(0,n.jsx)(s,Object.assign({},a,{children:(0,n.jsx)(t,{})})):t();function t(){let e=Object.assign({p:\"p\",h1:\"h1\",a:\"a\",span:\"span\",pre:\"pre\",code:\"code\",h2:\"h2\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`At my job we have spent a lot of time converting a node backend and angular frontend to Typescript.\nBefore Typescript when working in our codebase I found myself having to read a lot of code, API schemas, and tests just to see what fields actually existed.\nSo during the transition I tried my hardest to make the types I made as descriptive as they could be.\nConverting to Typescript and making big interfaces/types with many optional fields does not buy you much other than typo prevention and basic autocomplete.`}),`\n`,(0,n.jsx)(e.p,{children:\"This post assumes you have a basic understanding of Javascript/Typescript.\"}),`\n`,(0,n.jsxs)(e.h1,{id:\"literal-types\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#literal-types\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Literal types\"]}),`\n`,(0,n.jsx)(e.p,{children:\"You are most likely familiar with the basic types like\"}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"let\"}),\" num\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"number\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token number\",children:\"1\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// can be any number\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"let\"}),\" str\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'hi'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// can be any string\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"let\"}),\" bool\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"boolean\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token boolean\",children:\"true\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// can be true or false\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"let\"}),\" arr\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"number\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),(0,n.jsx)(e.span,{className:\"token number\",children:\"10\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// can be an array of any length with numbers\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"let\"}),\" obj\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),\" key\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),\" key\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'value'\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// the key field can be any string\"}),`\n`]})]})}),`\n`,(0,n.jsx)(e.p,{children:\"These types are fine for many cases and I still default most types to be these until I understand the code more.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types\",children:\"Literal Types\"}),\" on the other hand are a much stronger restriction on what the allowed values are\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" numLiteral \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token number\",children:\"1\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"as\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// this can only be the number 1, no other number\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" strLiteral \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'literal'\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"as\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// can only be the string 'literal'\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" boolLiteral \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token boolean\",children:\"true\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"as\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// can only be true\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" arrLiteral \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),(0,n.jsx)(e.span,{className:\"token number\",children:\"10\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"as\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// can only be an array with a single element of 10\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" objLiteral \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),\" key\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'value'\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"as\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// can only be this specific object mapping\"}),`\n`]})]})}),`\n`,(0,n.jsx)(e.p,{children:\"These types on their own are not that useful but when combined with unions and conditional types they can make your types very powerful.\"}),`\n`,(0,n.jsxs)(e.h1,{id:\"unions\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#unions\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Unions\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\",children:\"Union Types\"}),` allow you to say a type is either\n`,(0,n.jsx)(e.code,{children:\"foo\"}),\" or \",(0,n.jsx)(e.code,{children:\"bar\"}),\" or \",(0,n.jsx)(e.code,{children:\"number\"}),\" or \",(0,n.jsx)(e.code,{children:\"string\"}),\"...\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"printId\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"id\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"number\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"|\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"'Your ID is: '\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"+\"}),\" id\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,n.jsx)(e.p,{children:\"This function will allow you to pass in a string or number, this is fine since both can be added to a string for display.\"}),`\n`,(0,n.jsx)(e.p,{children:\"When combined with literals you can make types very strongly defined.\"}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"MethodType\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"GET\"'}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"|\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"PUT\"'}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"|\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"POST\"'}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"|\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"DELETE\"'}),`\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"makeHttpCall\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"url\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" method\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" MethodType\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\"...\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" url \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"johns.codes\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token function\",children:\"makeHttpCall\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"url\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"GET\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// allowed\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token function\",children:\"makeHttpCall\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"url\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"GeT\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// not allowed\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token function\",children:\"makeHttpCall\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"url\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"POG\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// not allowed\"}),`\n`]})]})}),`\n`,(0,n.jsx)(e.p,{children:`This helps greatly for new users of this function to see what the valid method fields are without having to look at external documentation,\nyour editor will provide autocomplete on the method field, and you get a compile error if you try to use an arbitrary string as the method parameter.`}),`\n`,(0,n.jsxs)(e.h2,{id:\"restricting-unions\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#restricting-unions\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Restricting Unions\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Literals allow for strongly typed APIs, but how do you properly narrow a general type to a more specific type? Typescript allows this in a few ways\"}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"handleAny\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"url\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" method\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"unknown\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token keyword\",children:\"typeof\"}),\" method \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"===\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"string\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// in this block method is now a string type\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token class-name\",children:(0,n.jsx)(e.span,{className:\"token keyword\",children:\"if\"})}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"method \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"==\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"GET\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token comment\",children:'// method is now the literal \"GET\"'}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"        \",(0,n.jsx)(e.span,{className:\"token function\",children:\"makeHttpCall\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"url\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" method\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"method \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"==\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:'\"PUT\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"...\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[`This manual checking is fine but if you have a more complex type or a union with many possible values this gets unwieldy quite fast.\nThe next best approach is a `,(0,n.jsx)(e.a,{href:\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\",children:\"type predicate\"})]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token comment\",children:\"// First define valid methods as a const array\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" ValidMethods \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"'GET'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'PUT'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'POST'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'DELETE'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"as\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"MethodType\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"typeof\"}),\" ValidMethods\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),(0,n.jsx)(e.span,{className:\"token builtin\",children:\"number\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// resulting type is the same as before\"}),`\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"isValidMethod\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"method\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"unknown\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" method \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"is\"}),\" MethodType \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// need the `as any` since valid methods is more strongly typed\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"return\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"typeof\"}),\" method \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"===\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'string'\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"&&\"}),\" ValidMethods\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"includes\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"method \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"as\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"any\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"handleAny\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"url\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" method\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"unknown\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"isValidMethod\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"method\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// method is now a MethodType\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token function\",children:\"makeHttpCall\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"url\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" method\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The type predicate \",(0,n.jsx)(e.code,{children:\"isValidMethod\"}),` is just a function that returns a boolean,\nwhen true Typescript knows the input parameter `,(0,n.jsx)(e.code,{children:\"method\"}),\" is a \",(0,n.jsx)(e.code,{children:\"MethodType\"}),` and can be used as such.\nType predicates are a good simple way to encode any runtime checks into the type system.`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"discriminated-unions\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#discriminated-unions\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Discriminated unions\"]}),`\n`,(0,n.jsx)(e.p,{children:`Now unions of basic literals are quite powerful, but unions can be even more powerful when you make unions of objects.\nSay in your app you track different events. The events could look like the following`}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"LoginEvent\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// the user's email\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  user\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  wasSuccessful\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" bool\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"PostCreatedEvent\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  name\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  body\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  createdAt\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" date\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token comment\",children:\"// and many others\"}),`\n`]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[`Once you have typed out all the different events, and you want to group them together to a single event type\nyou might think a simple union like `,(0,n.jsx)(e.code,{children:\"type ApiEvent = LoginEvent | PostCreatedEvent | ...\"}),` would be good but\nwhen you want to narrow this type down you would have to end up with a lot of `,(0,n.jsx)(e.code,{children:\"if ('user' in event) {..}\"}),\" checks or many custom type predicate functions.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To avoid that issue you can define the event types as a \",(0,n.jsx)(e.a,{href:\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions\",children:\"Discriminated union\"}),`.\nAll this is, is a union type where all types in the union have a field whose value is unique in all the union's types. We can redefine the above types as follows`]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"LoginEvent\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  type\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'login'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  user\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  wasSuccessful\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" ApiEvent\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"PostCreatedEvent\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  type\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'postCreated'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  name\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  body\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"string\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  createdAt\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" Date\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"ApiEvent\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" LoginEvent \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"|\"}),\" PostCreatedEvent\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"EventTypes\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" ApiEvent\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"'type'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// this resolves to 'login' | 'postCreated'\"}),`\n`]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example you could name the key \",(0,n.jsx)(e.code,{children:\"type\"}),` whatever you want, as long as every type has that field the union type will allow you to access the key.\nNow to narrow this type down you could do the following`]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"logEvent\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"event\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" ApiEvent\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"type \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"===\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'login'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsxs)(e.span,{className:\"token template-string\",children:[(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"user: \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"user\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token string\",children:\", wasSuccessful: \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"wasSuccessful\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"else\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"type \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"===\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'postCreated'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsxs)(e.span,{className:\"token template-string\",children:[(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"post \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"name\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token string\",children:\" was created at \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"createdAt\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,n.jsx)(e.p,{children:`This style of checking the discriminating field in if statement is fine but is a little verbose to me.\nI find that a switch statement makes it more readable and less verbose.`}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"logEvent\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"event\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" ApiEvent\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"switch\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"type\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"case\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'login'\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsxs)(e.span,{className:\"token template-string\",children:[(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"user: \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"user\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token string\",children:\", wasSuccessful: \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"wasSuccessful\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"break\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"case\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'postCreated'\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsxs)(e.span,{className:\"token template-string\",children:[(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"post \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"name\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token string\",children:\" was created at \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"createdAt\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"break\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"default\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"throw\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"Error\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsxs)(e.span,{className:\"token template-string\",children:[(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"invalid event type: \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token keyword\",children:\"type\"}),(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[`There is one issue with this approach, in the future when we add a new event type it would fall through to default case, and we wouldn't know about it until runtime.\nHowever, using Typescript's `,(0,n.jsx)(e.code,{children:\"never\"}),\" type we can force a compile error when we don't handle all cases\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-typescript\",children:(0,n.jsxs)(e.code,{className:\"language-typescript code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"assertUnreachable\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"type\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"never\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"never\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"throw\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"token class-name\",children:\"Error\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsxs)(e.span,{className:\"token template-string\",children:[(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"Invalid event type: \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),(0,n.jsx)(e.span,{className:\"token keyword\",children:\"type\"}),(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"logEvent\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"event\",(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" ApiEvent\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" type \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"type\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"switch\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"type\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"case\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'login'\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsxs)(e.span,{className:\"token template-string\",children:[(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"user: \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"user\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token string\",children:\", wasSuccessful: \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"wasSuccessful\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"break\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"case\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'postCreated'\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token builtin\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsxs)(e.span,{className:\"token template-string\",children:[(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"post \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"name\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token string\",children:\" was created at \"}),(0,n.jsxs)(e.span,{className:\"token interpolation\",children:[(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"${\"}),\"event\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),\"createdAt\",(0,n.jsx)(e.span,{className:\"token interpolation-punctuation punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token template-punctuation string\",children:\"`\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"break\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"default\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\":\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token comment\",children:\"// event.type is `never` here since this default case would never be hit since all possible cases are handled\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"      \",(0,n.jsx)(e.span,{className:\"token function\",children:\"assertUnreachable\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),\"type\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now in the future if we added an event with a type field of \",(0,n.jsx)(e.code,{children:\"NewEvent\"}),` it would fall through to the default case,\nsince its type is not `,(0,n.jsx)(e.code,{children:\"never\"}),\" (it would be \",(0,n.jsx)(e.code,{children:\"NewEvent\"}),\") we would get a compile error on the call to \",(0,n.jsx)(e.code,{children:\"assertUnreachable\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h1,{id:\"wrap-up\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#wrap-up\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Wrap up\"]}),`\n`,(0,n.jsx)(e.p,{children:`While these features I covered can help you a lot (these are almost all I used during the initial typescript migration),\nthere are many other really cool typescript features, like generics, mapped types and conditional types.\nI hope to cover them all in a Part 2 so check back soon!`})]})}}var f=w;return b;})();\n;return Component;","toc":[{"value":"Literal types","url":"#literal-types","depth":1},{"value":"Unions","url":"#unions","depth":1},{"value":"Restricting Unions","url":"#restricting-unions","depth":2},{"value":"Discriminated unions","url":"#discriminated-unions","depth":2},{"value":"Wrap up","url":"#wrap-up","depth":1}],"frontMatter":{"readingTime":{"text":"10 min read","minutes":9.945,"time":596700,"words":1989},"slug":"intermediate-typescript","fileName":"intermediate-typescript.mdx","title":"Intermediate Typescript Part 1","date":"2022-01-25T00:00:00.000Z","tags":["Typescript","code","types"],"draft":false,"summary":"Typescript patterns I have found to make your life easier in a big codebase","images":[],"layout":"PostLayout"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.215,"time":12900,"words":43},"slug":["default"],"fileName":"default.md","name":"John Murray","avatar":"/static/images/me.jpg","occupation":"Software Engineer","github":"https://github.com/JRMurr","date":null}],"prev":null,"next":null},"__N_SSG":true}