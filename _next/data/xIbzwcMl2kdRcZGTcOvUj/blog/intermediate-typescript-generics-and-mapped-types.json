{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var r=Object.create;var l=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var t=a=>l(a,\"__esModule\",{value:!0});var N=(a,s)=>()=>(s||a((s={exports:{}}).exports,s),s.exports),u=(a,s)=>{t(a);for(var c in s)l(a,c,{get:s[c],enumerable:!0})},k=(a,s,c)=>{if(s&&typeof s==\"object\"||typeof s==\"function\")for(let n of d(s))!m.call(a,n)&&n!==\"default\"&&l(a,n,{get:()=>s[n],enumerable:!(c=p(s,n))||c.enumerable});return a},y=a=>k(t(l(a!=null?r(h(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var i=N((T,o)=>{o.exports=_jsx_runtime});var b={};u(b,{default:()=>f,frontmatter:()=>g});var e=y(i()),g={title:\"Intermediate Typescript: Generics and Mapped Types\",date:\"2022-01-26\",tags:[\"Typescript\",\"code\",\"types\"],draft:!0,summary:\"Useful applications of generics and mapped types\",images:[],layout:\"PostLayout\"};function w(a={}){let{wrapper:s}=a.components||{};return s?(0,e.jsx)(s,Object.assign({},a,{children:(0,e.jsx)(c,{})})):c();function c(){let n=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",pre:\"pre\",code:\"code\",h3:\"h3\"},a.components);return(0,e.jsxs)(e.Fragment,{children:[/_ TODO: links _/,`\n`,(0,e.jsx)(n.p,{children:'In the last post, I covered Literal and Union types. Those types are great and can get you a long way when writing your apps. When your codebase starts to grow you may find your \"middleware\"/helper functions still have too general of types which leads to more type casting than you would like. This is where generics and mapped types come in.'}),`\n`,(0,e.jsxs)(n.h2,{id:\"generics\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#generics\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Generics\"]}),`\n`,(0,e.jsxs)(n.p,{children:[`If your first interaction with generics was with java in school they may have put a bad taste in your mouth.\n`,(0,e.jsx)(n.a,{href:\"https://www.typescriptlang.org/docs/handbook/2/generics.html\",children:\"Generics\"}),` can be very simple and can help a lot with not repeating yourself.\nThe simplest way to think of them is sort of like a function that takes types as parameters and yields back a new type.\nTo drive that point home lets look at a few simple examples.`]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsxs)(n.span,{className:\"token class-name\",children:[\"AddString\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"NumOrString\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" AddString\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token builtin\",children:\"number\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// yields number | string\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"StringOrString\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" AddString\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// yields just string\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,e.jsxs)(n.span,{className:\"token class-name\",children:[\"Box\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" stringBox\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" Box\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'aString'\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" arrayNumBox\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" Box\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token builtin\",children:\"number\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"2\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"3\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" literalBox\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" Box\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'aLiteral'\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'aLiteral'\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Generics act as a template, you define a type using a type parameter (in these cases \",(0,e.jsx)(n.code,{children:\"T\"}),\", but it can be any identifier), when the generic is used it would fill in all instances of \",(0,e.jsx)(n.code,{children:\"T\"}),\" with the passed in type.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"The most likely instance you would run into generics is with functions. Generics in functions allows types to flow through it when the function does not really care about any specific type.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsxs)(n.span,{className:\"token class-name\",children:[\"Nullable\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"null\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsxs)(n.span,{className:\"token generic-function\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"getWithDefault\"}),(0,e.jsxs)(n.span,{className:\"token generic class-name\",children:[(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]})]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"possibleValue\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" Nullable\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" defaultVal\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"possibleValue\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// possibleValue is now T\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" possibleValue\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// returning a T when possibleValue is null\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" defaultVal\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" nullableNum\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" Nullable\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token builtin\",children:\"number\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"10\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" num \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"getWithDefault\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"nullableNum\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"2\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// num is now just a number type\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"In this example, we use the same type \",(0,e.jsx)(n.code,{children:\"T\"}),\" 3 times, as a \",(0,e.jsx)(n.code,{children:\"Nullable<T>\"}),\", a default value, and the functions return type. Notice we do not need to say \",(0,e.jsx)(n.code,{children:\"getWithDefault<number>(nullableNum,2)\"}),\", typescript infers that T should be set to number based on usage.\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"generics-to-make-types-flow\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#generics-to-make-types-flow\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),'Generics to make types \"flow\"']}),`\n`,(0,e.jsxs)(n.p,{children:['Generics can help address a number of potential issues of types not \"flowing\" the way you want. A great example of this is a function modifying members of a union type. Recall the ',(0,e.jsx)(n.code,{children:\"ApiEvent\"}),\" type from the last post\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"LoginEvent\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'login'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  user\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  wasSuccessful\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"boolean\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"PostCreatedEvent\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'postCreated'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  name\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  body\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  createdAt\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" Date\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"ApiEvent\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" LoginEvent \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" PostCreatedEvent\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now let's say you are making a function that will take and event, and add a new field \",(0,e.jsx)(n.code,{children:\"logged: boolean\"}),\" to show the event was logged out. Your first attempt might look something like this.\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"addLogged\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"event\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" ApiEvent\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" ApiEvent \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"&\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" logged\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"boolean\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"...\"}),\"event\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" logged\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"This makes sense initially however, when you go to use this function you notice an issue.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" loginEvent\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" LoginEvent \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'login'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" user\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'john'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" wasSuccessful\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" updated \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"addLogged\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"loginEvent\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"updated\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"user\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// error: Property 'user' does not exist on type 'PostCreatedEvent & { logged: boolean; }'\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Weird, it's obvious to you that all this function does is add on a field, why is typescript complaining that \",(0,e.jsx)(n.code,{children:\"user\"}),\" does not exist on \",(0,e.jsx)(n.code,{children:\"PostCreatedEvent\"}),\"? The issue is the function definition. Based on the types we pass in \",(0,e.jsx)(n.code,{children:\"ApiEvent\"}),\" and get back \",(0,e.jsx)(n.code,{children:\"ApiEvent\"}),\" with some extra stuff. To the type system we could just always return a \",(0,e.jsx)(n.code,{children:\"PostCreatedEvent\"}),\" with the logged field.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Generics help us tell typescript what we put in, is what we are going get out. Let's re-write this function like so.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsxs)(n.span,{className:\"token generic-function\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"addLogged\"}),(0,e.jsxs)(n.span,{className:\"token generic class-name\",children:[(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"extends\"}),\" ApiEvent\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]})]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"event\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"&\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" logged\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"boolean\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"...\"}),\"event\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" logged\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" loginEvent\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" LoginEvent \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'login'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" user\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'john'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" wasSuccessful\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"updated\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"user\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// no error\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Notice we did not change any logic of the function, just the type definition. We can still only pass in \",(0,e.jsx)(n.code,{children:\"ApiEvent\"}),\"s but when we pass in a specific \",(0,e.jsx)(n.code,{children:\"LoginEvent\"}),\" the type system knows we are only going to get back a \",(0,e.jsx)(n.code,{children:\"LoginEvent\"}),\". The \",(0,e.jsx)(n.code,{children:\"extends\"}),` keyword for generics is very powerful to restrict the possible allowed values for a function while still reasoning about specific types.\nThis does not lose generality if you had a list of `,(0,e.jsx)(n.code,{children:\"ApiEvents\"}),\" you could still map over them with this function.\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"generics-in-type-definitions\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#generics-in-type-definitions\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Generics in type definitions\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Sometimes you may have a few wrapper types like hold the same types. This example is a little contrived, but I've run into this a few times before.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"ValidValue\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"number\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"WrapperOne\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'wrapperOne'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" ValidValue\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  info\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"WrapperTwo\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'wrapperTwo'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" ValidValue\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  info\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"number\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Wrapper\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" WrapperOne \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" WrapperTwo\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"In this example lets say the wrappers should both hold the same value type (both string or both number). But with this definition you could do\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" wrappedValues\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" Wrapper\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'wrapperOne'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'aVal'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    info\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'extra info'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'more info'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'wrapperTwo'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    info\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'wait why is the value a number'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Since the \",(0,e.jsx)(n.code,{children:\"value\"}),\" field can be \",(0,e.jsx)(n.code,{children:\"string | number\"}),\" there is nothing stopping a user of this type to mix and match the wrapped value types in the objects of the array.\"]}),`\n`,(0,e.jsx)(n.p,{children:'Generics can be used to \"lock\" the value type in for all elements of the array.'}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"ValidValue\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"number\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,e.jsxs)(n.span,{className:\"token class-name\",children:[\"WrapperOne\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"extends\"}),\" ValidValue\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'wrapperOne'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  info\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"interface\"}),\" \",(0,e.jsxs)(n.span,{className:\"token class-name\",children:[\"WrapperTwo\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"extends\"}),\" ValidValue\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'wrapperTwo'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  value\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  info\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"number\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsxs)(n.span,{className:\"token class-name\",children:[\"Wrappers\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"extends\"}),\" ValidValue\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" WrapperOne\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" WrapperTwo\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now when we say we have a \",(0,e.jsx)(n.code,{children:\"Wrappers<string>\"}),\" both wrapper's \",(0,e.jsx)(n.code,{children:\"value\"}),\" type will be string.\"]}),`\n`,(0,e.jsxs)(n.h2,{id:\"mapped-types\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#mapped-types\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Mapped Types\"]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\"https://www.typescriptlang.org/docs/handbook/2/mapped-types.html\",children:\"Mapped Types\"}),` are a specific kind of generic types to help you build out new types.\nYou may have seen is the `,(0,e.jsx)(n.code,{children:\"Record<K,V>\"}),\" type, this lets you define an object whose keys are in the type \",(0,e.jsx)(n.code,{children:\"k\"}),\" and values are in the type \",(0,e.jsx)(n.code,{children:\"V\"}),\". You can define your own record type like so.\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsxs)(n.span,{className:\"token class-name\",children:[\"MyRecord\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\"KeyType \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"extends\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" ValueType\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"key \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"in\"}),\" KeyType\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" ValueType\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" myRecord\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" MyRecord\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'foo'\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'bar'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"number\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\" foo\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"10\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" bar\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'string'\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"All mapped types do is iterate over possible values to define new keys (notice the \",(0,e.jsx)(n.code,{children:\"key in KeyType\"}),`).\nAnother common mapped type is `,(0,e.jsx)(n.code,{children:\"Pick<T, Keys>\"}),\", this will yield a new type by picking the set of properties (\",(0,e.jsx)(n.code,{children:\"Keys\"}),\") from \",(0,e.jsx)(n.code,{children:\"T\"}),\". You can define it like so.\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-typescript\",children:(0,e.jsxs)(n.code,{className:\"language-typescript code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsxs)(n.span,{className:\"token class-name\",children:[\"myPick\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\"Type\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" Keys \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"extends\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"keyof\"}),\" Type\",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"key \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"in\"}),\" Keys\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" Type\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"key\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// same record from the above example\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"type\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"OnlyFoo\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" myPick\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token keyword\",children:\"typeof\"}),\" myRecord\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'foo'\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// resulting type is {foo: number | string}\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Typescript has a number of built-in \",(0,e.jsx)(n.a,{href:\"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys\",children:\"Utility types\"}),\", look over them all, they are extremely handy to avoid repeating yourself.\"]})]})}}var f=w;return b;})();\n;return Component;","toc":[{"value":"Generics","url":"#generics","depth":2},{"value":"Generics to make types \"flow\"","url":"#generics-to-make-types-flow","depth":3},{"value":"Generics in type definitions","url":"#generics-in-type-definitions","depth":3},{"value":"Mapped Types","url":"#mapped-types","depth":2}],"frontMatter":{"readingTime":{"text":"9 min read","minutes":8.6,"time":516000,"words":1720},"slug":"intermediate-typescript-generics-and-mapped-types","fileName":"intermediate-typescript-generics-and-mapped-types.md","title":"Intermediate Typescript: Generics and Mapped Types","date":"2022-01-26T00:00:00.000Z","tags":["Typescript","code","types"],"draft":true,"summary":"Useful applications of generics and mapped types","images":[],"layout":"PostLayout"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.215,"time":12900,"words":43},"slug":["default"],"fileName":"default.md","name":"John Murray","avatar":"/static/images/me.jpg","occupation":"Software Engineer","github":"https://github.com/JRMurr","date":null}],"prev":{"title":"Intermediate Typescript: Literals and Unions","date":"2022-01-25T00:00:00.000Z","tags":["Typescript","code","types"],"draft":false,"summary":"Typescript patterns I have found to make your life easier in a big codebase","images":[],"layout":"PostLayout","slug":"intermediate-typescript"},"next":null},"__N_SSG":true}